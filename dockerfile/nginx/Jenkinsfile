// keepto build number 20;
// Do not allow concurrent builds;
// project is parameterized;
properties([
    gitLabConnection('Gitlab'),disableConcurrentBuilds(),
    buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '20')), 
    parameters([
        choice(choices: ['uat', 'prod'], description: 'deploy environment', name: 'DEPLOY_ENV'),
        booleanParam(defaultValue: true, description: 'maven package and docker image', name: 'STEP_BUILD'),
        ]),
 ])

// check before build

def jenkinsfilename = "file/Jenkinsfile"
def jenkinsfile = libraryResource(jenkinsfilename)
def resource = libraryResource("config/business/${name}.yaml")
def config = readYaml text: resource

if (config.pipeline.enabled) {
	pipePodTemplate(config.app.build_label){
		// global ENV with APP_NAME
		env.APP_NAME = name
		ws("workspace/${config.app.name}") {
		pipeCheck.preCheck()

		// notify start job
		pipeDingTalkNotify.start()

		def gitinfo
		def config 

		stage("Checkout") {
			gitinfo = checkout scm
			config = pipeParseConfig(gitinfo)
			pipeCheck.configCheck(config)

		}

		if (env.DEPLOY_ENV == "prod") {
			pipeStage("Approve") {
				pipeApprove("test")
			}
		}

		pipeStage("maven") {
			pipeBuild.maven(config.app.build_cmd)
		}

		pipeStage("docker") {
			buildArgs = """\
				--build-arg APP=${config.app.name} \
				--build-arg GIT_COMMIT=${config.GIT_COMMIT} \
				--build-arg GIT_URL=${config.GIT_URL} \
			""".trim()
			pipeBuild.docker(config, buildArgs)
		}

		pipeStage("Deploy ${DEPLOY_ENV}") {
			pipeDeploy.helm(config) 
		}	
		}
	}
} else {
	currentBuild.result = 'ABORTED'
	error "Project pipeline disabled!! skip..."
}
